{
	"info": {
		"_postman_id": "aa155ac9-58cd-4ace-be52-3af79c675d43",
		"name": "Sunbird Composite Search API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20672544"
	},
	"item": [
		{
			"name": "Positive",
			"item": [
				{
					"name": "Content Search",
					"item": [
						{
							"name": "200 - Get live Content list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonResponse = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify keys and data type of the response result\", () => {",
											"    pm.expect(jsonResponse.result.content).to.be.a(\"array\");",
											"});",
											"",
											"pm.test(\"Content type should be Content\", function () {",
											"    pm.expect(jsonResponse.result.content[0].contentType).to.eql('Resource');",
											"});",
											"",
											"//Validation",
											"pm.test(\"id should be api.v1.search\", function () {",
											"   pm.expect(jsonResponse.id).to.eql(\"api.v1.search\");",
											"});",
											"pm.test(\"ver should be 1.0\", function () {",
											"   pm.expect(jsonResponse.ver).to.eql(\"1.0\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"connection": true
								},
								"disableUrlEncoding": false
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "Bearer {{apiKey}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "user-id",
										"value": "{{userId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"filters\": {\n            \"status\": [\n                \"Live\"\n            ],\n            \"mimeType\": \"application/vnd.ekstep.ecml-archive\",\n            \"contentType\": \"Resource\",\n            \"objectType\": \"Content\"\n        },\n        \"sort_by\": {\n            \"lastUpdatedOn\": \"desc\"\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/composite/v1/search",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"composite",
										"v1",
										"search"
									]
								},
								"description": "This API is associated with search API\nThe endpoint for search is /composite/v3/search"
							},
							"response": []
						}
					]
				},
				{
					"name": "Assessment Search",
					"item": [
						{
							"name": "200 - Get live Assesment list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonResponse = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify keys and data type of the response result\", () => {",
											"    pm.expect(jsonResponse.result.items).to.be.a(\"array\");",
											"});",
											"",
											"pm.test(\"Content type should be Asset\", function () {",
											"    pm.expect(jsonResponse.result.items[0].objectType).to.eql('AssessmentItem');",
											"});",
											"",
											"//Validation",
											"pm.test(\"id should be api.v1.search\", function () {",
											"   pm.expect(jsonResponse.id).to.eql(\"api.v1.search\");",
											"});",
											"pm.test(\"ver should be 1.0\", function () {",
											"   pm.expect(jsonResponse.ver).to.eql(\"1.0\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"connection": true
								},
								"disableUrlEncoding": false
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "Bearer {{apiKey}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "user-id",
										"value": "{{userId}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"filters\": {\n            \"objectType\": [\n                \"AssessmentItem\"\n            ],\n            \"status\": [\n                \"Live\"\n            ]\n        },\n        \"sort_by\": {\n            \"lastUpdatedOn\": \"desc\"\n        },\n        \"limit\": 50\n    }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/composite/v1/search",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"composite",
										"v1",
										"search"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Asset Search",
					"item": [
						{
							"name": "200 - Get live assets list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonResponse = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Verify keys and data type of the response result\", () => {",
											"    pm.expect(jsonResponse.result.content).to.be.a(\"array\");",
											"});",
											"",
											"pm.test(\"Content type should be Asset\", function () {",
											"    pm.expect(jsonResponse.result.content[0].contentType).to.eql('Asset');",
											"});",
											"",
											"//Validation",
											"pm.test(\"id should be api.v1.search\", function () {",
											"   pm.expect(jsonResponse.id).to.eql(\"api.v1.search\");",
											"});",
											"pm.test(\"ver should be 1.0\", function () {",
											"   pm.expect(jsonResponse.ver).to.eql(\"1.0\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableUrlEncoding": false,
								"disabledSystemHeaders": {
									"connection": true
								}
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "Bearer {{apiKey}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "Authorization",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "user-id",
										"type": "text",
										"value": "{{userId}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"filters\": {\n            \"mediaType\": [\n                \"image\"\n            ],\n            \"contentType\": [\n                \"Asset\"\n            ],\n            \"status\": [\n                \"Live\"\n            ]\n        },\n        \"limit\": 50,\n        \"offset\": 0\n    }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/composite/v1/search",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"composite",
										"v1",
										"search"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"let jsonResponse = pm.response.json();",
							"",
							"//Verification",
							"pm.test(\"Status code is 200\", () => {",
							"    pm.response.to.have.status(200)",
							"});",
							"//code name contains a string",
							"tests[\"Status code name has string OK\"] = responseCode.name.has(\"OK\");",
							"",
							"pm.test(\"Verify keys and data type of the params in positive scenario\", () => {",
							"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");",
							"  pm.expect(jsonResponse.params.err).to.be.null;",
							"  pm.expect(jsonResponse.params.status).to.be.a(\"string\");",
							"  pm.expect(jsonResponse.params.errmsg).to.be.null;",
							"});",
							"",
							"pm.test(\"params.status should be \\\"successful\\\"\", () => {",
							"    pm.expect(jsonResponse.params.status).to.eql(\"successful\");",
							"});",
							"pm.test(\"responseCode should be OK\", () => {",
							"    pm.expect(jsonResponse.responseCode).to.eql(\"OK\");",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "Negative",
			"item": [
				{
					"name": "400 - Search filters missing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonResponse = pm.response.json()",
									"",
									"//Verification",
									"pm.test(\"Status code is 400\", () => {",
									"    pm.response.to.have.status(400)",
									"});",
									"//code name contains a string",
									"tests[\"Status code name has string \\\"Bad Request\\\"\"] = responseCode.name.has(\"Bad Request\");",
									"",
									"pm.test(\"Verify keys and data type of the response result\", () => {",
									"  pm.expect(jsonResponse.result).to.be.an(\"object\");",
									"});",
									"",
									"//Validation",
									"// Response body",
									"pm.test(\"responseCode should be \\\"CLIENT_ERROR\\\"\", () => {",
									"    pm.expect(jsonResponse.responseCode).to.eql(\"CLIENT_ERROR\");",
									"});",
									"",
									"// Params",
									"pm.test(\"params.err should be \\\"ERR_CONTENT_SEARCH_FIELDS_MISSING\\\"\", () => {",
									"    pm.expect(jsonResponse.params.err).to.eql(\"ERR_CONTENT_SEARCH_FIELDS_MISSING\");",
									"});",
									"pm.test(\"params.errmsg should be \\\"Required fields for search content are missing\\\"\", () => {",
									"    pm.expect(jsonResponse.params.errmsg).to.eql(\"Required fields for search content are missing\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"connection": true
						}
					},
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "Bearer {{apiKey}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Authenticated-User-token",
								"value": "{{userToken}}"
							},
							{
								"key": "X-Channel-Id",
								"value": "{{userChannelId}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": {\n    }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/composite/v1/search",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"composite",
								"v1",
								"search"
							]
						},
						"description": "This API is associated with batch creation\nThe endpoint for Creates a Batch is /batch/create\nThe fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
					},
					"response": []
				},
				{
					"name": "500 - parameter cannot be negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonResponse = pm.response.json()",
									"",
									"//Verification",
									"pm.test(\"Status code is 500\", () => {",
									"    pm.response.to.have.status(500)",
									"});",
									"",
									"pm.test(\"Verify keys and data type of the response result\", () => {",
									"  pm.expect(jsonResponse.result).to.be.an(\"object\");",
									"});",
									"",
									"//Validation",
									"// Response body",
									"pm.test(\"responseCode should be \\\"SERVER_ERROR\\\"\", () => {",
									"    pm.expect(jsonResponse.responseCode).to.eql(\"SERVER_ERROR\");",
									"});",
									"",
									"// Params",
									"pm.test(\"params.err should be \\\"ERR_SYSTEM_EXCEPTION\\\"\", () => {",
									"    pm.expect(jsonResponse.params.err).to.eql(\"ERR_SYSTEM_EXCEPTION\");",
									"});",
									"pm.test(\"params.errmsg should be \\\"[size] parameter cannot be negative, found [-1]\\\"\", () => {",
									"    pm.expect(jsonResponse.params.errmsg).to.eql(\"[size] parameter cannot be negative, found [-1]\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"connection": true
						}
					},
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "Bearer {{apiKey}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "Authorization",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Authenticated-User-token",
								"value": "{{userToken}}"
							},
							{
								"key": "X-Channel-Id",
								"value": "{{userChannelId}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": {\n        \"filters\": {\n            \"objectType\": [\n                \"AssessmentItem\"\n            ],\n            \"status\": [\n                \"Live\"\n            ]\n        },\n        \"sort_by\": {\n            \"lastUpdatedOn\": \"desc\"\n        },\n        \"limit\": 1\n    }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/composite/v1/search",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"composite",
								"v1",
								"search"
							]
						},
						"description": "This API is associated with batch creation\nThe endpoint for Creates a Batch is /batch/create\nThe fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"let jsonResponse = pm.response.json();",
							"",
							"pm.test(\"Verify keys and data type of the params in negative scenario\", () => {",
							"  pm.expect(jsonResponse.params.resmsgid).to.be.a(\"string\");",
							"  pm.expect(jsonResponse.params.msgid).to.be.null;",
							"  pm.expect(jsonResponse.params.err).to.be.a(\"string\");",
							"  pm.expect(jsonResponse.params.status).to.be.a(\"string\");",
							"  pm.expect(jsonResponse.params.errmsg).to.be.a(\"string\");",
							"});",
							"",
							"pm.test(\"params.status should be \\\"failed\\\"\", () => {",
							"    pm.expect(jsonResponse.params.status).to.eql(\"failed\");",
							"});",
							"",
							"pm.test(\"id should be api.v1.search\", () => {",
							"   pm.expect(jsonResponse.id).to.eql(\"api.v1.search\");",
							"});",
							"pm.test(\"ver should be 1.0\", () => {",
							"   pm.expect(jsonResponse.ver).to.eql(\"1.0\");",
							"});"
						]
					}
				}
			]
		}
	]
}